<Application x:Class="AstrophotographyBuddy.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:AstrophotographyBuddy.ViewModel"
             xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
             xmlns:util ="clr-namespace:AstrophotographyBuddy.Utility"
              xmlns:datavis="clr-namespace:System.Windows.Controls.DataVisualization;assembly=System.Windows.Controls.DataVisualization.Toolkit"
             xmlns:chartingToolkit=	"clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=System.Windows.Controls.DataVisualization.Toolkit"   
             xmlns:Primitives="clr-namespace:System.Windows.Controls.DataVisualization.Charting.Primitives;assembly=System.Windows.Controls.DataVisualization.Toolkit"            
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/AstrophotographyBuddy;component/Resources/SVGDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <vm:ApplicationVM x:Key="AppVM" />            
            <BooleanToVisibilityConverter x:Key="VisibilityConverter"/>
            <util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
            <util:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
            <util:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <util:DatabindingDebugConverter x:Key="DebugConverter" />

            <SolidColorBrush x:Key="PrimaryBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.PrimaryColor}"/>
            <SolidColorBrush x:Key="SecondaryBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.SecondaryColor}"/>
            <SolidColorBrush x:Key="BorderBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.BorderColor}"/>
            <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.ButtonBackgroundColor}"/>
            <SolidColorBrush x:Key="ButtonBackgroundSelectedBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.ButtonBackgroundSelectedColor}"/>
            <SolidColorBrush x:Key="ButtonForegroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.ButtonForegroundColor}"/>
            <SolidColorBrush x:Key="ButtonForegroundDisabledBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.ButtonForegroundDisabledColor}"/>
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.BackgroundColor}"/>

            <SolidColorBrush x:Key="AltPrimaryBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltPrimaryColor}"/>
            <SolidColorBrush x:Key="AltSecondaryBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltSecondaryColor}"/>
            <SolidColorBrush x:Key="AltBorderBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltBorderColor}"/>
            <SolidColorBrush x:Key="AltButtonBackgroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltButtonBackgroundColor}"/>
            <SolidColorBrush x:Key="AltButtonBackgroundSelectedBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltButtonBackgroundSelectedColor}"/>
            <SolidColorBrush x:Key="AltButtonForegroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltButtonForegroundColor}"/>
            <SolidColorBrush x:Key="AltButtonForegroundDisabledBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltButtonForegroundDisabledColor}"/>
            <SolidColorBrush x:Key="AltBackgroundBrush" Color="{Binding Source={StaticResource AppVM}, Path=OptionsVM.AltBackgroundColor}"/>

            <!-- Custom Styles -->

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />
            </Style>

            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />                
            </Style>

            <Style TargetType="{x:Type DataGrid}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
            </Style>

            <Style TargetType="{x:Type ListView}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
            </Style>



            <Style TargetType="GroupBox">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="6"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="6"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="6"/>
                                </Grid.RowDefinitions>
                                <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                                <Border BorderBrush="{StaticResource BackgroundBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                                    <Border.OpacityMask>
                                        <MultiBinding ConverterParameter="7" UpdateSourceTrigger="Default">
                                            <MultiBinding.Converter>
                                                <BorderGapMaskConverter/>
                                            </MultiBinding.Converter>
                                            <Binding ElementName="Header" Path="ActualWidth"/>
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                        </MultiBinding>
                                    </Border.OpacityMask>
                                    <Border BorderBrush="{StaticResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                        <Border BorderBrush="{StaticResource BackgroundBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                                    </Border>
                                </Border>
                                <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <ContentPresenter Grid.ColumnSpan="2" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="FontSize" Value="15" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border CornerRadius="4" BorderThickness="1" BorderBrush="{StaticResource BorderBrush}">
                                <Border CornerRadius="4" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                                    </Grid>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                                    <Setter Property="Foreground" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                                    <Setter Property="Foreground" Value="{StaticResource ButtonBackgroundBrush}" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4" />                                    
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type RepeatButton}">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="FontSize" Value="15" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Border x:Name="border" CornerRadius="4" BorderThickness="1" BorderBrush="{StaticResource BorderBrush}">
                                <Border CornerRadius="4" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                                    </Grid>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background"  Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="ToggleButton.IsChecked" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4" />
                                </Trigger>
                                <!-- <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                <Setter Property="TextElement.Foreground" TargetName="MyContentPresenter" Value="{StaticResource PrimaryBrush}"/>
                            </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ToggleButton}" x:Key="TB" >
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="FontSize" Value="15" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}" >
                            <Border x:Name="border" CornerRadius="4" BorderThickness="1" BorderBrush="{StaticResource BorderBrush}">
                                <Border CornerRadius="4" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                                    </Grid>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background"  Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="ToggleButton.IsChecked" Value="True">
                                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4" />
                                </Trigger>
                                <!-- <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrush}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource BorderBrush}"/>
                                <Setter Property="TextElement.Foreground" TargetName="MyContentPresenter" Value="{StaticResource PrimaryBrush}"/>
                            </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TextBlockWithMouseOver" TargetType="{x:Type TextBlock}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                        <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}, Path=IsMouseOver}" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                        <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Chart Styles -->
            <Style x:Key="ChartStyle" TargetType="{x:Type chartingToolkit:Chart}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type chartingToolkit:Chart}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0.5" Background="{TemplateBinding Background}" Padding="1">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <datavis:Title Content="{TemplateBinding Title}">
                                        <datavis:Title.Style>
                                            <Style TargetType="{x:Type datavis:Title}">
                                                <Setter Property="FontSize" Value="12"/>
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                                <Setter Property="Margin" Value="0"/>
                                                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                                                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                            </Style>
                                        </datavis:Title.Style>
                                    </datavis:Title>
                                    <Grid Margin="0,15" Grid.Row="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Primitives:EdgePanel x:Name="ChartArea" Style="{TemplateBinding ChartAreaStyle}">
                                            <Grid Panel.ZIndex="-1">
                                                <Grid.Style>
                                                    <Style TargetType="{x:Type Grid}">
                                                        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                                                    </Style>
                                                </Grid.Style>
                                            </Grid>
                                            <Border BorderBrush="{StaticResource BorderBrush}" BorderThickness="1" Panel.ZIndex="10"/>
                                        </Primitives:EdgePanel>
                                    </Grid>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="LegendStyle" Value="{StaticResource ChartLegendStyle}"></Setter>

            </Style>

            <Style x:Key="LineSeriesStyle" TargetType="{x:Type chartingToolkit:LineSeries}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type chartingToolkit:LineSeries}" >
                            <Canvas x:Name="PlotArea" >
                                <Polyline Points="{TemplateBinding Points}">
                                    <Polyline.Style>
                                        <Style TargetType="{x:Type Polyline}">
                                            <Setter Property="Stroke" Value="{StaticResource SecondaryBrush}" />
                                            <Setter Property="StrokeThickness" Value="2"/>
                                            <Setter Property="StrokeMiterLimit" Value="1"/>
                                        </Style>
                                    </Polyline.Style>
                                </Polyline>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="DataPointStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type chartingToolkit:LineDataPoint}">
                            <Setter Property="Background" Value="Yellow"></Setter>
                            <Setter Property="Width" Value="5"></Setter>
                            <Setter Property="Height" Value="5"></Setter>
                            <Setter Property="Template" Value="{x:Null}">
                                <!--<Setter.Value>
                                    <ControlTemplate TargetType="{x:Type chartingToolkit:LineDataPoint}">
                                        <Ellipse>
                                            <Ellipse.Style>
                                                <Style TargetType="{x:Type Ellipse}">
                                                    <Setter Property="Fill" Value="{StaticResource PrimaryBrush}"></Setter>
                                                    <Setter Property="Stroke" Value="{StaticResource PrimaryBrush}"></Setter>
                                                    <Setter Property="Height" Value="5"></Setter>
                                                    <Setter Property="Width" Value="5"></Setter>
                                                </Style>
                                            </Ellipse.Style>
                                        </Ellipse>
                                    </ControlTemplate>
                                </Setter.Value>-->
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>



            <Style x:Key="ChartLegendStyle" TargetType="{x:Type datavis:Legend}">
                <Setter Property="Margin" Value="15,0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
            </Style>

            <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="Transparent"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid>
                                <Border Name="outerBorder"
                            Background="{StaticResource ButtonBackgroundBrush}"
                            BorderBrush="{StaticResource ButtonBackgroundBrush}"
                            Height="26" Width="26" Opacity="1" BorderThickness="2" CornerRadius="13"/>
                                <Border Name="innerBorder"
                            Background="{StaticResource ButtonBackgroundBrush}"
                            BorderBrush="{StaticResource ButtonBackgroundBrush}"
                            Height="10" Width="10" CornerRadius="5" Opacity="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="outerBorder" Property="BorderBrush" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="outerBorder" Property="Background" Value="{StaticResource ButtonForegroundDisabledBrush}" />
                                    <Setter TargetName="outerBorder" Property="BorderBrush" Value="{StaticResource ButtonForegroundDisabledBrush}" />
                                    <Setter TargetName="innerBorder" Property="Width" Value="4" />
                                    <Setter TargetName="innerBorder" Property="Height" Value="4" />
                                    <Setter TargetName="innerBorder" Property="CornerRadius" Value="2" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
                <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TickBar x:Name="TopTick" Visibility="Collapsed" Fill="{StaticResource PrimaryBrush}" Placement="Left" SnapsToDevicePixels="True"
                 Width="4" Margin="0,0,2,0" />
                    <Border x:Name="TrackBackground"
                Grid.Column="1"
                Margin="0,10"
                BorderThickness="2"
                BorderBrush="{StaticResource ButtonBackgroundBrush}"
                HorizontalAlignment="Center" Width="4" />
                    <Track x:Name="PART_Track" Grid.Column="1">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"  Style="{StaticResource SliderRepeatButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb" Style="{StaticResource SliderThumbStyle}" />
                        </Track.Thumb>
                    </Track>
                    <TickBar x:Name="BottomTick" Grid.Column="2" Visibility="Collapsed" Fill="{StaticResource PrimaryBrush}" Placement="Right"
                 Width="4" Margin="2,0,0,0" SnapsToDevicePixels="True" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TickBar x:Name="TopTick" Visibility="Collapsed" Fill="{StaticResource PrimaryBrush}" Placement="Top" SnapsToDevicePixels="True"
                 Height="4" Margin="0,0,0,2" />
                    <Border x:Name="TrackBackground"
                Grid.Row="1"
                Margin="10,0"
                BorderThickness="2"
                BorderBrush="{StaticResource ButtonBackgroundBrush}"
                VerticalAlignment="Center" Height="4" />
                    <Track x:Name="PART_Track" Grid.Row="1">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"  Style="{StaticResource SliderRepeatButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb" Style="{StaticResource SliderThumbStyle}" />
                        </Track.Thumb>
                    </Track>
                    <TickBar x:Name="BottomTick" Grid.Row="2" Visibility="Collapsed" Fill="{StaticResource PrimaryBrush}" Placement="Bottom"
                 SnapsToDevicePixels="True" Height="4" Margin="0,2,0,0"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                        <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>





            <Style x:Key="MyFocusVisualStyte" >
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle x:Name="FocusStyle" StrokeDashArray="4 4" RadiusX="5" RadiusY="5" Fill="Transparent"
                           Stroke="#99029cc7" StrokeThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style  TargetType="{x:Type Slider}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource MyFocusVisualStyte}" />
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="MinWidth" Value="104" />
                        <Setter Property="MinHeight" Value="21" />
                        <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="MinWidth" Value="21" />
                        <Setter Property="MinHeight" Value="104" />
                        <Setter Property="Template" Value="{StaticResource VerticalSlider}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Expander -->
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="15"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse Width="15" Height="15"  Fill="{StaticResource ButtonBackgroundBrush}">

                                    </Ellipse>
                                    <Path x:Name="icon" Fill="{StaticResource ButtonForegroundBrush}" Width="15" Height="15" Margin="2" Data="{StaticResource NextSVG}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="0.8" ScaleY="0.8" />
                                                <RotateTransform Angle="90"></RotateTransform>
                                            </TransformGroup>

                                        </Path.RenderTransform>
                                    </Path>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="RenderTransform"  TargetName="icon">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="0.8" ScaleY="0.8" />
                                                <RotateTransform Angle="0"></RotateTransform>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid Background="Transparent" SnapsToDevicePixels="True">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="15"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Ellipse Width="15" Height="15"  Fill="{StaticResource ButtonBackgroundBrush}">

                                    </Ellipse>
                                    <Path x:Name="icon" Fill="{StaticResource ButtonForegroundBrush}" Width="15" Height="15" Margin="2" Data="{StaticResource NextSVG}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="90"></RotateTransform>
                                        </Path.RenderTransform>
                                    </Path>
                                    <ContentPresenter Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="RenderTransform"  TargetName="icon">
                                        <Setter.Value>
                                            <RotateTransform Angle="0"></RotateTransform>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="DownExpander" TargetType="{x:Type Expander}">
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                      Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                      FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                      FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                      Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom"  Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="true">
                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="RightExpander" TargetType="{x:Type Expander}">
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" 
                                      ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                      ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                      Content="{TemplateBinding Header}" DockPanel.Dock="Left" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                      FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                      FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                      Style="{StaticResource ExpanderRightHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Right" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="true">
                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style TargetType="{x:Type Expander}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <!-- <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                                <DockPanel>
                                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="true">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>-->
                <Style.Triggers>
                    <Trigger Property="ExpandDirection" Value="Right">
                        <Setter Property="Template" Value="{StaticResource RightExpander}" />
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Down">
                        <Setter Property="Template" Value="{StaticResource DownExpander}" />
                    </Trigger>
                </Style.Triggers>
            </Style>







            <!-- SrollViewer ScrollBar Repeat Buttons (at each end) -->
            <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border 
          Name="Border"
          Margin="1" 
          CornerRadius="2" 
          Background="{StaticResource ButtonBackgroundBrush}"
          BorderBrush="{StaticResource ButtonBackgroundBrush}"
          BorderThickness="1">
                                <Path 
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="{StaticResource ButtonForegroundBrush}"
            Data="{Binding Path=Content,
				RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" 
								Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" 
								Value="{StaticResource ButtonForegroundDisabledBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- SrollViewer ScrollBar Repeat Buttons (The part in the middle, 
             not the thumb the long area between the buttons ) -->
            <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- ScrollViewer ScrollBar Thumb, that part that can be dragged
            up/down or left/right Buttons -->
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border 
          CornerRadius="2" 
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="VerticalScrollBar" 
			TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="18"/>
                        <RowDefinition Height="0.00001*"/>
                        <RowDefinition MaxHeight="18"/>
                    </Grid.RowDefinitions>
                    <Border
      Grid.RowSpan="3"
      CornerRadius="2" 
      Background="{StaticResource ButtonForegroundDisabledBrush}" />
                    <RepeatButton 
      Grid.Row="0"                           
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
                    <Track 
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb 
          Style="{StaticResource ScrollBarThumb}" 
          Margin="1,0,1,0"  
          Background="{StaticResource ButtonBackgroundBrush}"
          BorderBrush="{StaticResource ButtonBackgroundBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton 
      Grid.Row="3" 
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
                </Grid>
            </ControlTemplate>
            <!-- HorizontalScrollBar Template using the previously created Templates -->
            <ControlTemplate x:Key="HorizontalScrollBar" 
			TargetType="{x:Type ScrollBar}">
                <Grid >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MaxWidth="18"/>
                        <ColumnDefinition Width="0.00001*"/>
                        <ColumnDefinition MaxWidth="18"/>
                    </Grid.ColumnDefinitions>
                    <Border
      Grid.ColumnSpan="3"
      CornerRadius="2" 
      Background="{StaticResource ButtonForegroundDisabledBrush}" />
                    <RepeatButton 
      Grid.Column="0"                           
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
                    <Track 
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb 
          Style="{StaticResource ScrollBarThumb}" 
          Margin="0,1,0,1"  
          Background="{StaticResource ButtonBackgroundBrush}"
          BorderBrush="{StaticResource ButtonBackgroundBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton 
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton 
      Grid.Column="3" 
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
                </Grid>
            </ControlTemplate>
            <!-- Style for overall  ScrollBar -->
            <Style  TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="18" />
                        <Setter Property="Template" 
						Value="{StaticResource HorizontalScrollBar}" />
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Template" 
						Value="{StaticResource VerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Style for overall  ScrollViewer -->
            <Style TargetType="{x:Type ScrollViewer}">

                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter Grid.Column="1" />

                                <ScrollBar Name="PART_VerticalScrollBar"
            Value="{TemplateBinding VerticalOffset}"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Grid.Column="1"
            Value="{TemplateBinding HorizontalOffset}"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            
            <!-- combobox -->

            <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Border
                      x:Name="Border" 
                      Grid.ColumnSpan="2"
                      CornerRadius="2"
                      Background="{StaticResource ButtonBackgroundBrush}"
                      BorderBrush="{StaticResource BorderBrush}"
                      BorderThickness="1" />
                    <Border x:Name="LeftBorder"
                      Grid.Column="0"
                      CornerRadius="2,0,0,2" 
                      Margin="1" 
                      Background="{StaticResource BackgroundBrush}" 
                      BorderBrush="{StaticResource BorderBrush}"
                      BorderThickness="0,0,1,0" />
                    <Path 
                      x:Name="Arrow"
                      Grid.Column="1"     
                      Fill="{StaticResource ButtonForegroundBrush}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 4 4 L 8 0 Z"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderBrush}" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ButtonForegroundBrush}" />
                    </Trigger>
                    <Trigger Property="ToggleButton.IsChecked" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderBrush}" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ButtonForegroundBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderBrush}" />
                        <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}"/>
                        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ButtonForegroundDisabledBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
                <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            </ControlTemplate>


            <Style  TargetType="ComboBox" >
                <Setter Property="Height" Value="30" />
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="MinWidth" Value="120"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Grid>
                                <ToggleButton 
                                Name="ToggleButton" 
                                Template="{StaticResource ComboBoxToggleButton}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                                </ToggleButton>
                                <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False" 
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="3,3,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                                <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="Transparent"
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                                    <Grid 
                                    Name="DropDown"
                                    SnapsToDevicePixels="True"                
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border 
                                        x:Name="DropDownBorder"
                                        Background="{StaticResource BackgroundBrush}"
                                        BorderThickness="1"
                                        BorderBrush="{StaticResource BackgroundBrush}"/>
                                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEditable" Value="true">
                                    <Setter Property="IsTabStop" Value="false"/>
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>
                                    <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBoxItem">
                            <Border
                                  Name="Border"
                                    
                       SnapsToDevicePixels="true">

                                <TextBlock Name="TextBlock" TextAlignment="Center">
                                        <ContentPresenter />
                                </TextBlock>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter TargetName="TextBlock" Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}"/>

                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource PrimaryBrush}"/>

                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <Style TargetType="{x:Type GridSplitter}">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
            </Style>




        </ResourceDictionary>
    </Application.Resources>
</Application>
